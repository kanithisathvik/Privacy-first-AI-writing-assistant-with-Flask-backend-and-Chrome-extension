"""
ContextGuard Backend - Export Module
Export processed text in various formats
"""

import io
import json
from datetime import datetime
from typing import Dict
from flask import send_file
from reportlab.lib.pagesizes import letter
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from reportlab.lib.units import inch
import logging

logger = logging.getLogger(__name__)


class ExportManager:
    """Handle text export in various formats"""
    
    def export_markdown(self, content: Dict) -> str:
        """Export as Markdown"""
        md = f"""# ContextGuard Export
**Date:** {datetime.now().strftime('%Y-%m-%d %H:%M')}
**Action:** {content.get('action', 'Unknown')}

---

## Original Text
{content.get('original', 'N/A')}

---

## Processed Result
{content.get('result', 'N/A')}

---

*Generated by ContextGuard - Privacy-first AI Assistant*
"""
        return md
    
    def export_pdf(self, content: Dict) -> io.BytesIO:
        """Export as PDF"""
        buffer = io.BytesIO()
        
        try:
            # Create PDF document
            doc = SimpleDocTemplate(buffer, pagesize=letter)
            styles = getSampleStyleSheet()
            story = []
            
            # Title
            title_style = ParagraphStyle(
                'CustomTitle',
                parent=styles['Heading1'],
                fontSize=24,
                textColor='#667eea'
            )
            story.append(Paragraph("ContextGuard Export", title_style))
            story.append(Spacer(1, 0.2*inch))
            
            # Metadata
            meta_text = f"<b>Date:</b> {datetime.now().strftime('%Y-%m-%d %H:%M')}<br/>"
            meta_text += f"<b>Action:</b> {content.get('action', 'Unknown')}"
            story.append(Paragraph(meta_text, styles['Normal']))
            story.append(Spacer(1, 0.3*inch))
            
            # Original text
            if content.get('original'):
                story.append(Paragraph("<b>Original Text</b>", styles['Heading2']))
                story.append(Spacer(1, 0.1*inch))
                story.append(Paragraph(content['original'], styles['Normal']))
                story.append(Spacer(1, 0.3*inch))
            
            # Processed result
            story.append(Paragraph("<b>Processed Result</b>", styles['Heading2']))
            story.append(Spacer(1, 0.1*inch))
            story.append(Paragraph(content.get('result', 'N/A'), styles['Normal']))
            story.append(Spacer(1, 0.5*inch))
            
            # Footer
            footer_text = "<i>Generated by ContextGuard - Privacy-first AI Assistant</i>"
            story.append(Paragraph(footer_text, styles['Normal']))
            
            # Build PDF
            doc.build(story)
            buffer.seek(0)
            
            return buffer
            
        except Exception as e:
            logger.error(f"PDF export error: {e}")
            # Fallback to simple text
            buffer = io.BytesIO()
            buffer.write(f"ContextGuard Export\n\n{content.get('result', '')}".encode('utf-8'))
            buffer.seek(0)
            return buffer
    
    def export_json(self, content: Dict) -> str:
        """Export as JSON"""
        export_data = {
            'timestamp': datetime.now().isoformat(),
            'action': content.get('action', 'Unknown'),
            'original': content.get('original', ''),
            'result': content.get('result', ''),
            'metadata': content.get('metadata', {}),
            'source': 'ContextGuard'
        }
        
        return json.dumps(export_data, indent=2, ensure_ascii=False)
    
    def export_txt(self, content: Dict) -> str:
        """Export as plain text"""
        txt = f"""ContextGuard Export
Date: {datetime.now().strftime('%Y-%m-%d %H:%M')}
Action: {content.get('action', 'Unknown')}

{'='*60}

ORIGINAL TEXT:
{content.get('original', 'N/A')}

{'='*60}

PROCESSED RESULT:
{content.get('result', 'N/A')}

{'='*60}

Generated by ContextGuard - Privacy-first AI Assistant
"""
        return txt


# Global instance
export_manager = ExportManager()
